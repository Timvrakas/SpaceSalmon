//AUTOGENERATED! DO NOT EDIT!

#pragma once
#include <stdint.h>
#include "../../slate/slate_utils.h"

struct telemetry_t
{
    SlateField<float> pt1 = 0.0; // GN2 Source Pressure, in Pa
    SlateField<float> pt2 = 0.0; // GN2 Postfill Pressure, in Pa
    SlateField<float> pt3 = 0.0; // NOx Source Pressure, in Pa
    SlateField<float> pt4 = 0.0; // NOx Postfill Pressure, in Pa
    SlateField<float> pt5 = 0.0; // PT5 Pressure, in Pa
    SlateField<float> pt6 = 0.0; // PT6 Pressure, in Pa
    SlateField<float> pt7 = 0.0; // PT7 Pressure, in Pa
    SlateField<float> pt8 = 0.0; // PT8 Pressure, in Pa
    SlateField<float> lc1 = 0.0; // Left Load Cell, in N
    SlateField<float> lc2 = 0.0; // Right Load Cell, in N
    SlateField<float> dry_mass = 0.0; // Vehicle Dry Mass, in kg
    SlateField<float> load_mass = 0.0; // Fuel/Ox Load, in kg
    SlateField<float> tc1 = 0.0; // NOx Bottle Temp, in K
    SlateField<float> tc2 = 0.0; // NOx Tank Temp, in K
    SlateField<bool> s1 = false; // Fuel Main Actuation, in bool
    SlateField<bool> s2 = false; // Ox Main Actuation, in bool
    SlateField<bool> s3 = false; // Fuel Fill, in bool
    SlateField<bool> s4 = false; // Fuel Bleed, in bool
    SlateField<bool> s5 = false; // Ox Fill, in bool
    SlateField<bool> s6 = false; // Ox Bleed, in bool
    SlateField<bool> s7 = false; // Ox Vent, in bool
    SlateField<bool> s8 = false; // S8, in bool
    SlateField<bool> s9 = false; // S9, in bool
    SlateField<bool> s10 = false; // S10, in bool
    SlateField<bool> s11 = false; // S11, in bool
    SlateField<bool> s12 = false; // S12, in bool
    SlateField<float> v_batt = 0.0; // Battery Voltage, in V
    SlateField<float> i_batt = 0.0; // Battery Current, in A
    SlateField<int16_t> s1_pulse = 0; // S1 valve timer, in ms
    SlateField<int16_t> s2_pulse = 0; // S2 valve timer, in ms
    SlateField<int16_t> s3_pulse = 0; // S3 valve timer, in ms
    SlateField<int16_t> s4_pulse = 0; // S4 valve timer, in ms
    SlateField<int16_t> s5_pulse = 0; // S5 valve timer, in ms
    SlateField<int16_t> s6_pulse = 0; // S6 valve timer, in ms
    SlateField<int16_t> s7_pulse = 0; // S7 valve timer, in ms
    SlateField<int16_t> s8_pulse = 0; // S8 valve timer, in ms
    SlateField<int16_t> s9_pulse = 0; // S9 valve timer, in ms
    SlateField<int16_t> s10_pulse = 0; // S10 valve timer, in ms
    SlateField<int16_t> s11_pulse = 0; // S11 valve timer, in ms
    SlateField<int16_t> s12_pulse = 0; // S12 valve timer, in ms
    SlateField<uint32_t> error = 0; // Error, in enum
    SlateField<bool> logging = 0; // Logging, in enum
    SlateField<bool> comms = 0; // comms, in enum
    SlateField<uint32_t> tick = 0; // tick, in ms

    typedef struct { uint8_t payload[106]; } telemetry_pkt_t;

    void seralize(telemetry_pkt_t &pkt){
        seralize_field(pkt,metaslate_hash,0);
        seralize_field(pkt,pt1,8);
        seralize_field(pkt,pt2,12);
        seralize_field(pkt,pt3,16);
        seralize_field(pkt,pt4,20);
        seralize_field(pkt,pt5,24);
        seralize_field(pkt,pt6,28);
        seralize_field(pkt,pt7,32);
        seralize_field(pkt,pt8,36);
        seralize_field(pkt,lc1,40);
        seralize_field(pkt,lc2,44);
        seralize_field(pkt,dry_mass,48);
        seralize_field(pkt,load_mass,52);
        seralize_field(pkt,tc1,56);
        seralize_field(pkt,tc2,60);
        seralize_field(pkt,s1,64);
        seralize_field(pkt,s2,65);
        seralize_field(pkt,s3,66);
        seralize_field(pkt,s4,67);
        seralize_field(pkt,s5,68);
        seralize_field(pkt,s6,69);
        seralize_field(pkt,s7,70);
        seralize_field(pkt,s8,71);
        seralize_field(pkt,s9,72);
        seralize_field(pkt,s10,73);
        seralize_field(pkt,s11,74);
        seralize_field(pkt,s12,75);
        seralize_field(pkt,v_batt,76);
        seralize_field(pkt,i_batt,80);
        seralize_field(pkt,s1_pulse,84);
        seralize_field(pkt,s2_pulse,85);
        seralize_field(pkt,s3_pulse,86);
        seralize_field(pkt,s4_pulse,87);
        seralize_field(pkt,s5_pulse,88);
        seralize_field(pkt,s6_pulse,89);
        seralize_field(pkt,s7_pulse,90);
        seralize_field(pkt,s8_pulse,91);
        seralize_field(pkt,s9_pulse,92);
        seralize_field(pkt,s10_pulse,93);
        seralize_field(pkt,s11_pulse,94);
        seralize_field(pkt,s12_pulse,95);
        seralize_field(pkt,error,96);
        seralize_field(pkt,logging,100);
        seralize_field(pkt,comms,101);
        seralize_field(pkt,tick,102);
    }

    void parseCMD(cmd_pkt_t &pkt){
        if(pkt.slate_hash == metaslate_hash){
            switch (pkt.offset)
            {
            case 48:
                dry_mass = *(float*)pkt.data;
                break;
            case 64:
                s1 = *(bool*)pkt.data;
                break;
            case 65:
                s2 = *(bool*)pkt.data;
                break;
            case 66:
                s3 = *(bool*)pkt.data;
                break;
            case 67:
                s4 = *(bool*)pkt.data;
                break;
            case 68:
                s5 = *(bool*)pkt.data;
                break;
            case 69:
                s6 = *(bool*)pkt.data;
                break;
            case 70:
                s7 = *(bool*)pkt.data;
                break;
            case 71:
                s8 = *(bool*)pkt.data;
                break;
            case 72:
                s9 = *(bool*)pkt.data;
                break;
            case 73:
                s10 = *(bool*)pkt.data;
                break;
            case 74:
                s11 = *(bool*)pkt.data;
                break;
            case 75:
                s12 = *(bool*)pkt.data;
                break;
            case 84:
                s1_pulse = *(int16_t*)pkt.data;
                break;
            case 85:
                s2_pulse = *(int16_t*)pkt.data;
                break;
            case 86:
                s3_pulse = *(int16_t*)pkt.data;
                break;
            case 87:
                s4_pulse = *(int16_t*)pkt.data;
                break;
            case 88:
                s5_pulse = *(int16_t*)pkt.data;
                break;
            case 89:
                s6_pulse = *(int16_t*)pkt.data;
                break;
            case 90:
                s7_pulse = *(int16_t*)pkt.data;
                break;
            case 91:
                s8_pulse = *(int16_t*)pkt.data;
                break;
            case 92:
                s9_pulse = *(int16_t*)pkt.data;
                break;
            case 93:
                s10_pulse = *(int16_t*)pkt.data;
                break;
            case 94:
                s11_pulse = *(int16_t*)pkt.data;
                break;
            case 95:
                s12_pulse = *(int16_t*)pkt.data;
                break;
            default:
                break;
            }
        }
    }

    static constexpr uint8_t metaslate_blob[] = { 0x78, 0x9c, 0xad, 0xd6, 0x3d, 0x6f, 0xd3, 0x40, 0x18, 0x07, 0xf0, 0x56, 0x62, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xf0, 0xc0, 0xc0, 0x50, 0x89, 0xda, 0x79, 0x97, 0x18, 0x68, 0xfa, 0x06, 0x34, 0x94, 0x40, 0x42, 0x78, 0x27, 0x5c, 0x9d, 0xc7, 0xa9, 0xe9, 0xd9, 0x8e, 0xfc, 0x9c, 0x23, 0xc2, 0x8e, 0xf8, 0x1c, 0x38, 0x49, 0xe3, 0xa0, 0x42, 0x40, 0x88, 0x2f, 0x00, 0x23, 0xdf, 0x81, 0xcf, 0xc2, 0xd9, 0x3e, 0x87, 0xba, 0x44, 0xa8, 0xb5, 0x9d, 0xe9, 0x62, 0x45, 0x3f, 0xfd, 0xef, 0xc9, 0xdd, 0x3f, 0x79, 0x37, 0x46, 0x4a, 0x18, 0x4c, 0x19, 0x50, 0x30, 0x80, 0xd9, 0x83, 0x91, 0x49, 0x0c, 0x98, 0xdd, 0x77, 0x88, 0x4e, 0xa5, 0x66, 0xf4, 0x70, 0xd2, 0x07, 0x1b, 0x75, 0xcb, 0x5c, 0xf6, 0xd4, 0x7d, 0x62, 0x9a, 0x40, 0xf1, 0xf7, 0xd2, 0xca, 0xb0, 0xc7, 0xe4, 0xf7, 0xa3, 0x0e, 0xa0, 0xfa, 0x6d, 0x7b, 0x57, 0x91, 0x1a, 0x96, 0x63, 0xab, 0x20, 0xd5, 0x6d, 0x40, 0x74, 0x6c, 0x18, 0x39, 0xa6, 0xce, 0xdc, 0x3a, 0x19, 0xb1, 0x41, 0x0f, 0xc6, 0x1a, 0xb5, 0x08, 0x9b, 0x74, 0x40, 0x23, 0x0e, 0x65, 0xbf, 0x96, 0xc4, 0x6b, 0x62, 0x38, 0x8c, 0xec, 0x51, 0xf8, 0x31, 0x42, 0xfd, 0x2d, 0x9c, 0x3b, 0xb4, 0x34, 0x0d, 0x81, 0x9d, 0xe7, 0xb0, 0x12, 0xc2, 0xdf, 0x7d, 0xb8, 0x6e, 0x21, 0xd3, 0x74, 0x4a, 0x33, 0xa0, 0x2f, 0x70, 0x3a, 0x27, 0x32, 0xef, 0xde, 0x7b, 0x93, 0x5d, 0xe6, 0x8b, 0x1c, 0xce, 0x8b, 0xcc, 0x3e, 0x9c, 0x61, 0xe6, 0x4b, 0x9c, 0x2e, 0x84, 0xf4, 0x51, 0xbd, 0x59, 0xc8, 0x40, 0xbc, 0xcc, 0xc5, 0xe2, 0x5c, 0x2c, 0x66, 0x20, 0x5e, 0xe1, 0x62, 0x69, 0x2e, 0x96, 0x32, 0x10, 0x25, 0x2e, 0x96, 0xe7, 0x62, 0x39, 0x03, 0xf1, 0xea, 0x90, 0xaa, 0xe2, 0xbc, 0x7e, 0xae, 0x81, 0xc6, 0xa4, 0x9a, 0x45, 0x3a, 0xd2, 0x3a, 0x50, 0x1a, 0x98, 0x1f, 0x76, 0xcf, 0x4e, 0x5e, 0xe3, 0xa4, 0x38, 0xa9, 0xb3, 0x07, 0x7a, 0x77, 0x3f, 0x0b, 0x73, 0xc5, 0xeb, 0xd8, 0x83, 0xb6, 0x41, 0x10, 0x43, 0xf8, 0x4b, 0x0b, 0xf6, 0x75, 0x95, 0x82, 0xb4, 0x61, 0x0f, 0xa4, 0xbb, 0xfc, 0x71, 0x38, 0x81, 0x83, 0xee, 0x69, 0xe8, 0x9f, 0x31, 0x7a, 0x75, 0xca, 0x3f, 0xdc, 0x39, 0x66, 0x1f, 0x6d, 0x39, 0x40, 0xaf, 0xf3, 0xe3, 0xea, 0xc7, 0x3e, 0x8b, 0x1b, 0x8f, 0x9c, 0x1f, 0xb2, 0x68, 0xb2, 0x33, 0xff, 0xf0, 0x57, 0x2d, 0xc6, 0x78, 0xe0, 0x26, 0x18, 0xbd, 0x70, 0x0c, 0x3b, 0x67, 0x37, 0xcb, 0xdc, 0x14, 0xa3, 0xfd, 0xe4, 0x9b, 0x4d, 0x62, 0x1e, 0xa4, 0x13, 0x6f, 0xb8, 0x18, 0xd5, 0x95, 0xbf, 0x6d, 0x3e, 0x4b, 0xdd, 0x94, 0xd6, 0x54, 0xe6, 0x10, 0xc6, 0x9b, 0x2d, 0xf0, 0x46, 0x7b, 0x96, 0x15, 0x7e, 0x73, 0xc1, 0x2a, 0x82, 0xc7, 0x1a, 0xa1, 0x08, 0xf1, 0x99, 0x2e, 0x0b, 0xf5, 0xa6, 0x8b, 0x22, 0xe6, 0x57, 0x9e, 0x32, 0x1b, 0x73, 0xcd, 0x45, 0x51, 0x52, 0xd3, 0x20, 0xe9, 0x16, 0x2f, 0x92, 0xa4, 0x56, 0xd5, 0x45, 0xd1, 0x4b, 0x1f, 0x03, 0xab, 0x4a, 0x01, 0x3a, 0x49, 0xb1, 0x75, 0x17, 0x45, 0x13, 0x4d, 0xf8, 0x66, 0xd3, 0xc4, 0xda, 0x70, 0x51, 0x34, 0x90, 0xe7, 0x1f, 0x98, 0x34, 0xa1, 0x36, 0x5d, 0x2c, 0xfd, 0x0d, 0xd5, 0x02, 0x93, 0x25, 0x95, 0xb6, 0x5c, 0x14, 0x95, 0xe3, 0x36, 0xca, 0x49, 0x91, 0x6d, 0x17, 0x2b, 0x11, 0x52, 0x49, 0x8a, 0xdc, 0x1a, 0xa2, 0xbc, 0x1a, 0x2a, 0xc3, 0x86, 0xbc, 0x9a, 0x94, 0xb9, 0xcd, 0x19, 0x79, 0xce, 0xc8, 0x49, 0x99, 0x3b, 0x9c, 0x51, 0xe6, 0x8c, 0x92, 0x94, 0xd9, 0x39, 0xec, 0xb7, 0xf7, 0x08, 0x63, 0xa2, 0x29, 0xaa, 0x7c, 0x09, 0xbc, 0xd3, 0x5a, 0x16, 0x65, 0xa4, 0x0b, 0xc7, 0x2e, 0x74, 0x78, 0xc5, 0x5b, 0xa7, 0xbc, 0xd7, 0xb5, 0x43, 0x7d, 0x11, 0xbb, 0xee, 0xd8, 0x76, 0x74, 0x16, 0x8e, 0xb3, 0x6b, 0xa7, 0x64, 0xeb, 0x1e, 0xca, 0xed, 0x9e, 0xc3, 0x77, 0x23, 0x7e, 0x33, 0x1a, 0xb2, 0xd4, 0x27, 0xb4, 0x0f, 0x12, 0xd3, 0x0d, 0xb0, 0x03, 0x77, 0xa2, 0x9b, 0x4c, 0x2e, 0xb6, 0x43, 0xd9, 0x35, 0x30, 0xa2, 0x97, 0x16, 0x0f, 0xa0, 0xe9, 0xa1, 0x12, 0x27, 0x95, 0xb4, 0xe4, 0x43, 0x0f, 0x73, 0x71, 0x32, 0x97, 0x96, 0x6c, 0x79, 0x98, 0x8f, 0x93, 0xf9, 0xb4, 0xe4, 0x23, 0x0f, 0x0b, 0x71, 0xb2, 0x90, 0x96, 0x7c, 0xec, 0x61, 0x31, 0x4e, 0x16, 0xd3, 0x92, 0x4f, 0x3c, 0x2c, 0xc5, 0xc9, 0x52, 0x5a, 0xf2, 0xa9, 0x87, 0xe5, 0x38, 0x59, 0x4e, 0x4b, 0x3e, 0xf3, 0xb0, 0x12, 0x27, 0x2b, 0x69, 0xc9, 0xe7, 0x53, 0xde, 0x36, 0xc7, 0xcd, 0x19, 0xef, 0x9c, 0xb4, 0xe8, 0x0b, 0x8e, 0xca, 0x27, 0xd0, 0xd4, 0x37, 0xe8, 0x25, 0x47, 0x95, 0x13, 0x68, 0xea, 0x3b, 0xd4, 0x1e, 0x83, 0x6d, 0x5b, 0x76, 0x08, 0x8e, 0x37, 0xfd, 0x75, 0xc0, 0x78, 0x0e, 0x77, 0x72, 0x8a, 0x70, 0x46, 0x60, 0x3a, 0xc6, 0x3f, 0x52, 0xbc, 0x33, 0x5e, 0x4d, 0xa8, 0xd5, 0xed, 0xea, 0x66, 0x57, 0xfc, 0x1e, 0xd5, 0xc2, 0x77, 0x27, 0x0b, 0xf3, 0x3f, 0x52, 0x94, 0xa9, 0x33, 0x56, 0x2d, 0xc3, 0x10, 0x7f, 0xd3, 0xc2, 0x75, 0x02, 0x85, 0x97, 0xaa, 0xae, 0x1e, 0x84, 0x48, 0xb0, 0x5c, 0xb0, 0xaf, 0x45, 0xf3, 0x89, 0xef, 0x4a, 0x9b, 0x32, 0x8b, 0x11, 0xda, 0xa6, 0x60, 0xbe, 0xfe, 0x03, 0x27, 0x32, 0xfd, 0x4b, };
    static constexpr uint64_t metaslate_hash = 0xe85ad293d6172c42;
};
